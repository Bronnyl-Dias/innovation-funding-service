

def targetBuild = hasProperty('profile') ? profile : 'docker';
apply from: targetBuild + "-build.gradle";
apply plugin: 'org.asciidoctor.convert'
apply from: rootProject.file("java-spring-boot.gradle")
apply from: rootProject.file("openshift-build.gradle")
configurations {
    providedRuntime
}

ext {
    snippetsDir = file('build/generated-snippets')
}

jar {
    baseName = 'ifs-sil-stub'
}

processResources {
    filesMatching("*.properties") {
        expand project.properties
    }
}

dependencies {
    compile project(":ifs-commons")
    compile "org.springframework.boot:spring-boot-starter-web"
    compile 'javax.mail:mail:1.4.7'
    testCompile "org.springframework.restdocs:spring-restdocs-mockmvc:1.1.2.RELEASE"
}

test {
    outputs.dir snippetsDir
    if (project.hasProperty('excludeTests')) {
        exclude "${project.excludeTests}"
    }

    if (project.hasProperty('testGroups')) {
        systemProperty 'testGroups', project.getProperty('testGroups')
    }
    finalizedBy asciidoctor
}


asciidoctor {
    dependsOn test
    attributes 'snippets': snippetsDir
    backends 'html5'
    inputs.dir snippetsDir
    outputs.dir file("static/docs")

    doLast {
        copy {
            from "build/asciidoc/html5"
            into 'static/docs'
        }
    }
}

/**
 * This task creates a `docker` directory in the $BUILD/docker` directory of the project,
 * where it will write all the necessary files to build a docker container.
 * In other words, after this task is executed, one could manually run `docker build .`
 * in the output directory.
 */
task prepareDockerInput {
    dependsOn build
    def inputDir = project.file("$project.buildDir/docker")

    doFirst {
        copy {
            from 'docker/'
            into inputDir
            include 'Dockerfile-template'
            rename 'Dockerfile-template', 'Dockerfile'
            filter {
                it.replaceAll('@version@', project.properties['version']).replaceAll('@app_name@', jar.baseName)
            }
        }
        copy {
            from jar
            into inputDir
        }
    }
}

buildDocker.dependsOn ":docker:app-base-image:buildDocker"
buildDocker.dependsOn prepareDockerInput

buildDocker.inputDir = project.file("$project.buildDir/docker")

osStageRemote.onlyIf { isNotProductionEnv() }

project.version = silStubVersion
tagDocker.tag = silStubVersion
osStageRemote.tag = silStubVersion
tagDockerLocal.tag = silStubVersion
osStageLocal.tag = silStubVersion

// Workaround for https://github.com/spring-projects/spring-boot/issues/8308
// Can reinstate excludeDevtools in the bootRepackage task in next release
springBoot {
    excludeDevtools = !(project.hasProperty('cloud') && cloud == 'development');
}

bootRepackage {
    mainClass = 'org.innovateuk.ifs.Application'
    //    excludeDevtools = !(project.hasProperty('cloud') && cloud == 'development');
}