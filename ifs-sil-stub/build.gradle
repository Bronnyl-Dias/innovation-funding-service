

def targetBuild = hasProperty('profile') ? profile : 'docker';
apply from: targetBuild + "-build.gradle";
apply plugin: 'org.asciidoctor.convert'
apply from: rootProject.file("gradle-support/java-spring-boot.gradle")
apply from: rootProject.file("gradle-support/openshift-build.gradle")
apply from: rootProject.file("gradle-support/prepare-docker.gradle")

configurations {
    providedRuntime
}

ext {
    snippetsDir = file('build/generated-snippets')
}

dependencies {
    compile project(":ifs-commons")
    compile "org.springframework.boot:spring-boot-starter-web"
    compile 'javax.mail:mail:1.4.7'
    testCompile "org.springframework.restdocs:spring-restdocs-mockmvc:1.1.2.RELEASE"
}

test {
    outputs.dir snippetsDir
    if (project.hasProperty('excludeTests')) {
        exclude "${project.excludeTests}"
    }

    if (project.hasProperty('testGroups')) {
        systemProperty 'testGroups', project.getProperty('testGroups')
    }
    finalizedBy asciidoctor
}


asciidoctor {
    dependsOn test
    attributes 'snippets': snippetsDir
    backends 'html5'
    inputs.dir snippetsDir
    outputs.dir file("static/docs")

    doLast {
        copy {
            from "build/asciidoc/html5"
            into 'static/docs'
        }
    }
}



buildDocker.dependsOn ":docker:app-base-image:buildDocker"
buildDocker.dependsOn prepareDockerBaseInput

buildDocker.inputDir = project.file("$project.buildDir/docker")

osStageRemote.onlyIf { isNotProductionEnv() }

project.version = silStubVersion
tagDocker.tag = silStubVersion
osStageRemote.tag = silStubVersion
tagDockerLocal.tag = silStubVersion
osStageLocal.tag = silStubVersion

createContainer.hostName="sil-stub"
createContainer.containerName="sil-stub"
createContainer.containerId="sil-stub"
createContainer.portBindings = ['8091:8080']

createContainer.enabled = project.hasProperty('initialise') ? project.property('initialise').toBoolean() : false
deploy.enabled = project.hasProperty('initialise') ? project.property('initialise').toBoolean() : false
wait.enabled = project.hasProperty('initialise') ? project.property('initialise').toBoolean() : false
stop.enabled = project.hasProperty('initialise') ? project.property('initialise').toBoolean() : false
removeContainer.enabled = project.hasProperty('initialise') ? project.property('initialise').toBoolean() : false