project.version = projectSetupMgtServiceVersion
tagDocker.tag = projectSetupMgtServiceVersion
osStageRemote.tag = projectSetupMgtServiceVersion
tagDockerLocal.tag = projectSetupMgtServiceVersion
osStageLocal.tag = projectSetupMgtServiceVersion

createContainer.hostName="project-setup-mgt-svc"
createContainer.containerName="project-setup-mgt-svc"
createContainer.containerId="project-setup-mgt-svc"
createContainer.portBindings = ['9004:8000']

def enabled = project.hasProperty('ifs.project-setup-mgt-service.enabled') ? project.property('ifs.project-setup-mgt-service.enabled').toBoolean() : true
[stop, removeContainer, createContainer, deploy, wait].each { task ->
    task.enabled = enabled
}

prepareDockerBaseInput {
    inputs.file("$rootProject.projectDir/ifs-web-service/ifs-web-core/build/classes")
    dependsOn ":ifs-web-service:ifs-web-core:build"
}

ext.serverContext = '/project-setup-management'

dependencies {
    compile project(':ifs-web-service:ifs-web-core')

    compile "commons-io:commons-io:2.5"

    testCompile project (path: ":ifs-resources", configuration: 'testArtifacts')
    testCompile project (path: ":ifs-commons", configuration: 'testArtifacts')
    testCompile project (path: ":ifs-security", configuration: 'testArtifacts')
    testCompile project (path: ":ifs-web-service:ifs-web-core", configuration: 'testArtifacts')

    testCompile "com.openpojo:openpojo:0.8.6"
    testCompile "org.skyscreamer:jsonassert:1.5.0"
    testCompile "net.sf.opencsv:opencsv:2.3"
}

processResources {
    filesMatching("*.properties") {
        expand project.properties
    }
    if (project.hasProperty("profile") && project.profile == "automated") {
        exclude '**/application.properties'
    }
}

jar.dependsOn ":ifs-web-service:gulp_default"