apply from: "versions.gradle"

allprojects {
    group 'innovateuk'
    version project.version

    apply plugin: 'idea'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'org.owasp.dependencycheck'

}


apply from: "openshift-support.gradle"
apply from: "zipkin-support.gradle"

if (!project.hasProperty('osTestArgs')) {
    ext.osTestArgs = ""
}

def isNamedEnv() {
    return ["sysint", "uat", "demo", "perf", "production"].contains(openshiftEnv)
}

def isNotProductionEnv() {
    !"production".equals(openshiftEnv)
}

configure(subprojects - project(":ifs-auth-service")) {

    apply plugin: 'io.spring.dependency-management'


}

buildscript {

    ext['thymeleaf.version'] = '3.0.3.RELEASE'

    ext {
        springBootVersion = '1.5.9.RELEASE'
        thymeleafVersion = ext['thymeleaf.version']
        springCloudVersion = 'Dalston.RELEASE'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://dl.bintray.com/robfletcher/gradle-plugins" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }

    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE"
        classpath 'com.bluepapa32:gradle-watch-plugin:0.1.5'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.owasp:dependency-check-gradle:3.1.0'
        classpath "com.avast.gradle:docker-compose-gradle-plugin:0.4.5"
        classpath 'net.researchgate:gradle-release:2.6.0'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
    }

}


dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            // filters out any version numbers ending in rejected. e.g 1.0.0-rc.
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'pr1', 'Beta'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}


apply plugin: "org.sonarqube"
apply plugin: 'docker-compose'
apply plugin: 'net.researchgate.release'
apply plugin: "com.github.hierynomus.license"

release {
    preTagCommitMessage = '[Gradle Release Plugin] - Performing release: '
    newVersionCommitMessage = '[Gradle Release Plugin] - Preparing new release version: '
    //Note: When testing releases (i.e. not performing real releases) this tagTemplate should be changed to something different
    // for example tagTemplate = 'TEST RELEASE ${version} ' this will ensure that we don't pollute our tags with fake releases.
    tagTemplate = '${version}'

    scmAdapters = [
            net.researchgate.release.GitAdapter,
    ]

    git {
        requireBranch = 'master|acceptance'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "IFS_Project"
        property "sonar.host.url", "https://devops.innovateuk.org/code-quality/"
        property "sonar.branch", "development"
        property "sonar.projectKey", "org.sonarqube:java-gradle-simple"
        property "sonar.exclusions", "**/*MapperImpl.java"
    }
}

dockerCompose {

    useComposeFiles = ['docker-compose.yml', 'docker-compose-dev.yml']

    if (project.hasProperty('ifs.zipkin.enabled') ? project.property('ifs.zipkin.enabled').toBoolean() : false) {
        useComposeFiles.add('docker-compose-zipkin.yml')
    }

    if (project.hasProperty('ifs.admin.enabled') ? project.property('ifs.admin.enabled').toBoolean() : false) {
        useComposeFiles.add('docker-compose-admin-console.yml')
    }

    if (project.hasProperty('ifs.fractal.enabled') ? project.property('ifs.fractal.enabled').toBoolean() : false) {
        useComposeFiles.add('docker-compose-fractal.yml')
    }

    removeContainers = false
    removeImages = "Local" // Accepted values are: "All", "Local" and "None"
    removeVolumes = false

    waitForTcpPortsDisconnectionProbeTimeout = java.time.Duration.ofMillis(100)
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

ext.zipkinEnabled = project.hasProperty('ifs.zipkin.enabled') ? project.property('ifs.zipkin.enabled').toBoolean() : false