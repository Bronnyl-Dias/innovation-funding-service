buildscript {

    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.6.13"
    }

}

apply plugin: com.avast.gradle.dockercompose.DockerComposePlugin

dockerCompose {

    projectName="innovation-funding-service"

    if (project.hasProperty('ifs.debug.enabled') ? project.property('ifs.debug.enabled').toBoolean() : false) {
        //Temp change to allow testing of compose HTTP_TIMEOUT issue
        useComposeFiles = ['docker-compose/docker-compose-debug.yml']
    } else {
        useComposeFiles = ['docker-compose/docker-compose.yml']
    }


    if (project.hasProperty('ifs.full-deployment.enabled') ? project.property('ifs.full-deployment.enabled').toBoolean() : true) {

        if (project.hasProperty('ifs.debug.enabled') ? project.property('ifs.debug.enabled').toBoolean() : false) {
            //Temp change to allow testing of compose HTTP_TIMEOUT issue
            useComposeFiles.add('docker-compose/docker-compose-full-debug.yml')
        } else {
            useComposeFiles.add('docker-compose/docker-compose-full.yml')
        }
    }


    if (project.hasProperty('ifs.zipkin.enabled') ? project.property('ifs.zipkin.enabled').toBoolean() : false) {
        useComposeFiles.add('docker-compose/docker-compose-zipkin.yml')
    }

    if (project.hasProperty('ifs.admin.enabled') ? project.property('ifs.admin.enabled').toBoolean() : false) {
        useComposeFiles.add('docker-compose/docker-compose-admin-console.yml')
    }

    if (project.hasProperty('ifs.fractal.enabled') ? project.property('ifs.fractal.enabled').toBoolean() : false) {
        useComposeFiles.add('docker-compose/docker-compose-fractal.yml')
    }

    if (project.property('ifsFinanceTotalsEnabled').toBoolean()) {
        useComposeFiles.add('docker-compose/docker-compose-finance-totals.yml')
    }


    removeContainers = false
    removeImages = "Local" // Accepted values are: "All", "Local" and "None"
    removeVolumes = false

    waitForTcpPortsDisconnectionProbeTimeout = java.time.Duration.ofMillis(100)
}