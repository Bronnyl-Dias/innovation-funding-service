import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.container.extras.*
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
apply plugin: com.bmuschko.gradle.docker.DockerJavaApplicationPlugin
apply from: rootProject.file("gradle-support/openshift-methods.gradle")

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.bmuschko:gradle-docker-plugin:3.2.4"
    }
}

task buildDocker(type: DockerBuildImage) {
    tag = "innovateuk/${project.name.replaceAll(/ifs-/, "")}"
    inputDir = project.projectDir
}

task tagDocker(type: DockerTagImage) {
    dependsOn buildDocker
    imageId = buildDocker.getTag()
    repository = project.dockerRegistry + "/" + openshiftEnv + "/" + project.name.replaceAll(/ifs-/, "")
    tag = project.version
}

task stop(type: DockerStopContainer) {
    targetContainerId { createContainer.getContainerId() }
    onError {
        //TODO maybe something smarter?
        //Deliberately ignore
    }
}

task removeContainer(type: DockerRemoveContainer, dependsOn: stop) {
    targetContainerId { createContainer.getContainerId() }
    onError {
        //TODO maybe something smarter?
        //Deliberately ignore
    }
}

task createContainer(type: DockerCreateContainer, dependsOn: [buildDocker, removeContainer]) {
    targetImageId { buildDocker.getImageId() }
    containerName = "${project.name.replaceAll(/ifs-/, "")}"
    containerId = "${project.name.replaceAll(/ifs-/, "")}"
    network="ifs"
}

task deploy(type: DockerStartContainer, dependsOn: createContainer) {
    targetContainerId { createContainer.getContainerId() }
}

task wait(type: DockerWaitHealthyContainer) {
    targetContainerId { createContainer.getContainerId() }
}

task osStageRemote(type: DockerPushImage) {
    dependsOn tagDocker
    registryCredentials = getRemoteOCCredentials()
    imageName = registryCredentials.url + "/" + openshiftEnv + "/" + project.name.replaceAll(/ifs-/, "")
    tag = project.version
}

task tagDockerLocal(type: DockerTagImage) {
    dependsOn buildDocker
    imageId = buildDocker.getTag()
    repository = "dummy"
    doFirst {
        if (repository == "dummy") {
            repository = getLocalOCCredentials().url + "/" + openshiftEnv + "/" + project.name.replaceAll(/ifs-/, "")
        }
    }
    tag = project.version
}

task osStageLocal(type: DockerPushImage) {
    dependsOn tagDockerLocal
    imageName = "dummy"
    doFirst {
        if (imageName == "dummy") {
            registryCredentials = getLocalOCCredentials()
            imageName = registryCredentials.url + "/" + openshiftEnv + "/" + project.name.replaceAll(/ifs-/, "")
        }
    }
    tag = project.version
}