
apply from: rootProject.file("gradle-support/new-relic.gradle")

/**
 * This task creates a `docker` directory in the $BUILD/docker` directory of the project,
 * where it will write all the necessary files to build a docker container.
 * In other words, after this task is executed, one could manually run `docker build .`
 * in the output directory.
 */

ext.dockerDir = "docker/"

task prepareDockerBaseInput {
    dependsOn build
    def inputDir = "$project.buildDir/docker"
    def jarFile = "${jar.baseName}-${project.properties['version']}.jar"

    inputs.file("$project.buildDir/libs/$jarFile")

    outputs.files(
            project.file("$inputDir/Dockerfile"),
            project.file("$inputDir/$jarFile")
    )

    doFirst {
        copy {
            from dockerDir
            into project.file(inputDir)

            include 'Dockerfile-template'
            rename 'Dockerfile-template', 'Dockerfile'
            filter {
                it.replaceAll('@version@', project.properties['version'])
                        .replaceAll('@app_name@', jar.baseName)
                        .replaceAll('@server_context@', project.properties['serverContext'] ?: '')
            }
        }
        copy {
            from jar
            into project.file(inputDir)
        }
    }
}


task prepareDockerInput {
    dependsOn prepareDockerBaseInput
    dependsOn getNewRelicAgent

    def currentFilePath = "${rootProject.projectDir}/setup-files/scripts/docker"
    def inputDir = "$project.buildDir/docker"

    outputs.files(
            project.file("$inputDir/coscale-monitoring.sh"),
            project.file("$inputDir/newrelic.jar"),
            project.file("$inputDir/newrelic.yml")
    )

    doFirst {
        copy {
            from file("$currentFilePath/coscale-monitoring.sh")
            from file("$currentFilePath/newrelic.jar")
            from file("$currentFilePath/newrelic.yml")
            into file(inputDir)
        }
    }

}