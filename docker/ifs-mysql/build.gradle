subprojects {

    def sqlVersion = "5.6.29"
    apply from: rootProject.file("gradle-support/openshift-build.gradle")
    buildDocker.tag = "innovateuk/ifs-mysql:" + sqlVersion
    buildDocker.inputDir = project.file("$project.parent.projectDir/docker/")

    tagDocker.onlyIf { !isNamedEnv() }
    tagDocker.repository = project.dockerRegistry + "/" + openshiftEnv + "/ifs-mysql"
    tagDocker.imageId = "innovateuk/ifs-mysql:" + sqlVersion
    tagDocker.tag = sqlVersion

    tagDockerLocal.imageId = "innovateuk/ifs-mysql:" + sqlVersion
    tagDockerLocal.tag = sqlVersion
    tagDockerLocal {
        doFirst {
            repository = getLocalOCCredentials().url + "/" + openshiftEnv + "/ifs-mysql"
            tag = sqlVersion
        }
    }

    osStageRemote.onlyIf { !isNamedEnv() }
    osStageRemote.imageName = getRemoteOCCredentials().url + "/" + openshiftEnv + "/ifs-mysql"
    osStageRemote.tag = sqlVersion

    osStageLocal.tag = sqlVersion
    osStageLocal {
        doFirst {
            registryCredentials = getLocalOCCredentials()
            imageName = registryCredentials.url + "/" + openshiftEnv + "/ifs-mysql"
        }
    }


    List<String> cmd = new ArrayList<>();
    cmd.add("--character-set-server=utf8, --collation-server=utf8_bin")

    createContainer.cmd = cmd

    createContainer.enabled = true
    deploy.enabled = true
    wait.enabled = true
    stop.enabled = true
    removeContainer.enabled = true

    //TODO I think we can change our onlyIf's to enabled?

    buildDocker.onlyIf { project.hasProperty('initialise') ? project.property('initialise').toBoolean() : false }
    stop.onlyIf { project.hasProperty('initialise') ? project.property('initialise').toBoolean() : false }
    removeContainer.onlyIf { project.hasProperty('initialise') ? project.property('initialise').toBoolean() : false }
    createContainer.onlyIf { project.hasProperty('initialise') ? project.property('initialise').toBoolean() : false }
    deploy.onlyIf { project.hasProperty('initialise') ? project.property('initialise').toBoolean() : false }




    task createTestSchema(type: Exec) {
        doFirst {
            commandLine 'docker', 'exec', '-d', sqlContainer, 'mysql', '-uroot', '-ppassword', '-e', 'create database if not exists ' + testSchema
        }
    }

    task startMySql(dependsOn: deploy) {
        doLast {
            exec {
                //wait for sql container to start.
                workingDir '.'
                commandLine 'sleep', '10'
            }
        }
    }

    task initDB {
        createTestSchema.mustRunAfter startMySql
        dependsOn startMySql
        dependsOn createTestSchema
    }

}







