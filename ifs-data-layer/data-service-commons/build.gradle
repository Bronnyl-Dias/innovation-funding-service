def targetBuildFile = project.hasProperty("profile") ? "${project.profile}-build.gradle" : "docker-build.gradle"
if (file(targetBuildFile).exists()) {
    apply from: targetBuildFile
}

bootRepackage {
    enabled = false
}

configurations {
    mapstruct
}

dependencies {
    compile project(":ifs-commons")
    compile project(":ifs-security")

    compile project(":ifs-sil-resources")


    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.apache.tika:tika-parsers:1.14"
    compile "org.apache.httpcomponents:httpasyncclient"
    compile "org.mapstruct:mapstruct:1.0.0.Final"
    mapstruct "org.mapstruct:mapstruct-processor:1.0.0.Final"

    testCompile project(':ifs-resources').sourceSets.test.output
    testCompile project(":ifs-commons").sourceSets.test.output
    testCompile project(":ifs-security").sourceSets.test.output

    testCompile project(':ifs-resources')
    testCompile project(":ifs-commons")
    testCompile project(":ifs-security")
    testCompile "com.h2database:h2:1.4.196"
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

sourceSets {
    client {
        java {
            srcDir 'src/main/java'
        }
        main {
            ext.originalJavaSrcDirs = java.srcDirs
            java.srcDir "${generatedMapperSourcesDir}"
        }
    }
}

task generateMainMapperClasses(type: JavaCompile) {
    ext.aptDumpDir = file( "build/tmp/apt/mapstruct" )
    destinationDir = aptDumpDir

    classpath = compileJava.classpath + configurations.mapstruct
    source = sourceSets.main.originalJavaSrcDirs
    ext.sourceDestDir = file generatedMapperSourcesDir

    options.define(
            compilerArgs: [
                    "-nowarn",
                    "-proc:only",
                    "-encoding", "UTF-8",
                    "-processor", "org.mapstruct.ap.MappingProcessor",
                    "-s", sourceDestDir.absolutePath,
                    "-source", 1.8,
                    "-target", 1.8,
            ]
    );

    inputs.dir source
    outputs.dir generatedMapperSourcesDir
    doFirst {
        sourceDestDir.mkdirs()
    }
    doLast {
        aptDumpDir.delete()
    }
}

compileJava.dependsOn generateMainMapperClasses
