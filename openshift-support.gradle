//support tasks for dealing with Openshift
if(project.hasProperty('profile') && profile == 'automated') {
    ext.openshiftEnv = project.properties['openshiftEnv'] ?: "automated"
}
//Workaround because of process resources.  dependency should be removed.
apply from: rootProject.file("java-spring-boot.gradle")
bootRepackage.enabled=false
build.enabled=false
// End workaround

processResources {

    from ('os-files') {
        include '**/*.yml'
    }
    // Note the presence of a $ character that is not then substituted or escaped
    // will cause process resources to fail.  This is why we are selective here
    //about which directories / files we perform property substitution on.
    //top level files
    filesMatching("*.*") {
        expand project.properties
    }
    // shib yml files
    filesMatching("shib/*.*") {
        expand project.properties
    }

    filesMatching("sil-stub/*.*") {
        expand project.properties
    }
}

task osDeployProduction(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "production", project.version]
}

task osUpgradeProduction(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "production", project.version]
}

task dbAnonymisedDumpProduction(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/db-anonymised-dump.sh'
    args = [openshiftEnv, "production", project.version]
}


// UAT tasks


task osDeployUat(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "uat", project.version]
}

task osUpgradeUat(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "uat", project.version]
}

task dbResetUat(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/db-reset.sh'
    args = [openshiftEnv, "uat", project.version]
}

task dbAnonymisedDumpUat(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/db-anonymised-dump.sh'
    args = [openshiftEnv, "uat", project.version]
}

task importAnonDataIntoUat(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/import-anon-data-into-environment.sh'
    args = [openshiftEnv, "uat",  project.version]
}

// Demo tasks


task osDeployDemo(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "demo", project.version]
}

task osUpgradeDemo(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "demo", project.version]
}


// Sysint tasks


task osDeploySysint(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "sysint", project.version]
}

task osUpgradeSysint(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "sysint", project.version]
}

task dbResetSysint(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/db-reset.sh'
    args = [openshiftEnv, "sysint", project.version]
}

task osDeployFractalSysint(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/os-deploy-fractal.sh'
    args = [openshiftEnv, "sysint", project.version]
}


// Perf tasks


task osDeployPerf(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "perf", project.version]
}

task osUpgradePerf(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "perf", project.version]
}

task dbResetPerf(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/db-reset.sh'
    args = [openshiftEnv, "perf", project.version]
}


// Local tasks

task osInitClusterLocal(type:Exec) {
    executable = 'setup-files/scripts/openshift/init-local-cluster.sh'
    args = [openshiftEnv, "local", project.version]
}

task osDeployLocal(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "local", project.version]
}

task osUpgradeLocal(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "local", project.version]
}

task dbResetLocal(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/db-reset.sh'
    args = [openshiftEnv, "local", project.version]
}

task dbAnonymisedDumpLocal(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/db-anonymised-dump.sh'
    args = [openshiftEnv, "local", project.version]
}

task createProjectLocal(type:Exec) {
    executable = 'setup-files/scripts/openshift/os-create-project.sh'
    args = [openshiftEnv, "local"]
}


// Remote tasks


task createProject(type:Exec) {
    executable = 'setup-files/scripts/openshift/os-create-project.sh'
    args = [openshiftEnv, "remote"]
}

task osDeployFractalRemote(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/os-deploy-fractal.sh'
    args = [openshiftEnv, "remote", project.version]
}

task osDeployRemote(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "remote", project.version]
}

task osUpgradeRemote(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "remote", project.version]
}

task dbAnonymisedDumpRemote(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/db-anonymised-dump.sh'
    args = [openshiftEnv, "remote", project.version]
}

task importAnonDataIntoRemote(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/import-anon-data-into-environment.sh'
    args = [openshiftEnv, "remote",  project.version]
}

task dbResetRemote(type:Exec) {
    dependsOn processResources
    executable = 'setup-files/scripts/openshift/db-reset.sh'
    args = [openshiftEnv, "remote", project.version]
}

task robotTestsFilter (type: Copy) {
    from 'robot-tests/IFS_acceptance_tests/resources/variables/'
    into 'robot-tests/IFS_acceptance_tests/resources/variables/'
    include 'EMAIL_VARIABLES_TEMPLATE.robot'
    rename 'EMAIL_VARIABLES_TEMPLATE.robot', 'EMAIL_VARIABLES_SENSITIVE.robot'
    filter(ReplaceTokens, tokens: [test_mailbox_one_password : project.properties['ifs.robot.mailbox.one.password'], test_mailbox_two_password : project.properties['ifs.robot.mailbox.two.password']])
}

import org.apache.tools.ant.filters.*

task osTestRemote(type:Exec) {
    dependsOn robotTestsFilter
    executable = 'setup-files/scripts/openshift/os-test-remote.sh'
    args = [openshiftEnv]
}

task osStopTests(type:Exec) {
    executable = 'setup-files/scripts/openshift/os-stop-tests.sh'
    args = []
}

task osTestResults(type:Exec) {
    executable = 'setup-files/scripts/openshift/os-test-results.sh'
    args = []
}


