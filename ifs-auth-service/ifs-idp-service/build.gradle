import org.apache.tools.ant.filters.ReplaceTokens

def String idpCertsVolume = 'src/main/docker/certs'

def String idpProxyKeyFile = "${idpCertsVolume}/idp_proxy_key.pem"
def String idpProxyCertificateFile = "${idpCertsVolume}/idp_proxy_certificate.pem"
def String idpProxyCacertificateFile = "${idpCertsVolume}/idp_proxy_cacertificate.pem"

def String spProxyCertificateFile = "${idpCertsVolume}/sp_proxy_certificate.pem"

def String idpSigningKeyFile = "${idpCertsVolume}/idp-signing.key"
def String idpSigningCertificateFile = "${idpCertsVolume}/idp-signing.crt"
def String idpEncryptionKeyFile = "${idpCertsVolume}/idp-encryption.key"
def String idpEncryptionCertificateFile = "${idpCertsVolume}/idp-encryption.crt"

def String ldapEncryptionCertificateFile = "${idpCertsVolume}/ldap-encryption.crt"
def String javaKeystorePassword = project.properties['java.keystore.password'] ?: "changeit"

apply from: rootProject.file("new-relic.gradle")


task prepareDockerFile {
    dependsOn ':ifs-auth-service:prepareSecrets'
    dependsOn getNewRelicAgent

    def String idpProxyKey = file(idpProxyKeyFile).text.trim().replace('\n', '\\n')
    def String idpProxyCertificate = file(idpProxyCertificateFile).text.trim().replace('\n', '\\n')
    def String idpProxyCacertificate = file(idpProxyCacertificateFile).text.trim().replace('\n', '\\n')

    def String spProxyCertificate = file(spProxyCertificateFile).text.trim().replace('\n', '\\n')

    def String idpSigningKey = file(idpSigningKeyFile).text.trim().replace('\n', '\\n')
    def String idpSigningCertificate = file(idpSigningCertificateFile).text.trim().replace('\n', '\\n')
    def String idpEncryptionKey = file(idpEncryptionKeyFile).text.trim().replace('\n', '\\n')
    def String idpEncryptionCertificate = file(idpEncryptionCertificateFile).text.trim().replace('\n', '\\n')

    def String ldapEncryptionCertificate = file(ldapEncryptionCertificateFile).text.trim().replace('\n', '\\n')

    def inputDir = project.file("$project.buildDir/docker")

    doFirst {
        copy {
            from 'src/main/docker/'
            into inputDir
            include 'Dockerfile-template'
            rename 'Dockerfile-template', 'Dockerfile'
            filter(ReplaceTokens, tokens: [auth_idp_proxy_key              : idpProxyKey,
                                           auth_idp_proxy_certificate      : idpProxyCertificate,
                                           auth_idp_proxy_cacertificate    : idpProxyCacertificate,
                                           auth_sp_proxy_certificate       : spProxyCertificate,
                                           auth_idp_signing_key            : idpSigningKey,
                                           auth_idp_signing_certificate    : idpSigningCertificate,
                                           auth_idp_encryption_key         : idpEncryptionKey,
                                           auth_idp_encryption_certificate : idpEncryptionCertificate,
                                           auth_ldap_encryption_certificate: ldapEncryptionCertificate,
                                           java_keystore_password          : javaKeystorePassword,
                                           version                         : project.properties['version']])
        }

        copy {
            from fileTree('src/main/docker/apache')
            into "${inputDir}/apache"
        }

        copy {
            from fileTree('src/main/docker/idp')
            into "${inputDir}/idp"
        }

        copy {
            from fileTree('src/main/docker/scripts')
            into "${inputDir}/scripts"
        }

        copy {
            from fileTree('src/main/docker/pages')
            into "${inputDir}/pages"
        }

        copy {
            from file('src/main/docker/default-jre-headless-dummy_1.0_all.deb')
            into inputDir
        }

        copy {
            from fileTree('src/main/docker/certs')
            into "${inputDir}/certs"
        }

        copy {
            from file("${rootProject.projectDir}/setup-files/scripts/docker/newrelic.jar")
            from file("${rootProject.projectDir}/setup-files/scripts/docker/newrelic.yml")
            into inputDir
        }
    }
}

buildDocker.dependsOn prepareDockerFile
project.version = idpVersion
tagDocker.tag = idpVersion
osStageRemote.tag = idpVersion
tagDockerLocal.tag = idpVersion
osStageLocal.tag = idpVersion